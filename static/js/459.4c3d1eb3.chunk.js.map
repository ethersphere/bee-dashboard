{"version":3,"file":"static/js/459.4c3d1eb3.chunk.js","mappings":"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","sources":["../node_modules/ky/source/errors/HTTPError.ts","../node_modules/ky/source/errors/TimeoutError.ts","../node_modules/ky/source/utils/is.ts","../node_modules/ky/source/utils/merge.ts","../node_modules/ky/source/core/constants.ts","../node_modules/ky/source/utils/normalize.ts","../node_modules/ky/source/utils/timeout.ts","../node_modules/ky/source/errors/DOMException.ts","../node_modules/ky/source/utils/delay.ts","../node_modules/ky/source/core/Ky.ts","../node_modules/ky/source/index.ts"],"sourcesContent":["import type {NormalizedOptions} from '../types/options.js';\n\n// eslint-lint-disable-next-line @typescript-eslint/naming-convention\nexport class HTTPError extends Error {\n\tpublic response: Response;\n\tpublic request: Request;\n\tpublic options: NormalizedOptions;\n\n\tconstructor(response: Response, request: Request, options: NormalizedOptions) {\n\t\tconst code = (response.status || response.status === 0) ? response.status : '';\n\t\tconst title = response.statusText || '';\n\t\tconst status = `${code} ${title}`.trim();\n\t\tconst reason = status ? `status code ${status}` : 'an unknown error';\n\n\t\tsuper(`Request failed with ${reason}`);\n\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.options = options;\n\t}\n}\n","export class TimeoutError extends Error {\n\tpublic request: Request;\n\n\tconstructor(request: Request) {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t\tthis.request = request;\n\t}\n}\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isObject = (value: unknown): value is object => value !== null && typeof value === 'object';\n","import type {KyHeadersInit, Options} from '../types/options.js';\nimport {isObject} from './is.js';\n\nexport const validateAndMerge = (...sources: Array<Partial<Options> | undefined>): Partial<Options> => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nexport const mergeHeaders = (source1: KyHeadersInit = {}, source2: KyHeadersInit = {}) => {\n\tconst result = new globalThis.Headers(source1 as HeadersInit);\n\tconst isHeadersInstance = source2 instanceof globalThis.Headers;\n\tconst source = new globalThis.Headers(source2 as HeadersInit);\n\n\tfor (const [key, value] of source.entries()) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n// TODO: Make this strongly-typed (no `any`).\nexport const deepMerge = <T>(...sources: Array<Partial<T> | undefined>): T => {\n\tlet returnValue: any = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!Array.isArray(returnValue)) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && key in returnValue) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject((source as any).headers)) {\n\t\t\t\theaders = mergeHeaders(headers, (source as any).headers);\n\t\t\t\treturnValue.headers = headers;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n","import type {Expect, Equal} from '@type-challenges/utils';\nimport {HttpMethod} from '../types/options.js';\n\nexport const supportsRequestStreams = (() => {\n\tlet duplexAccessed = false;\n\tlet hasContentType = false;\n\tconst supportsReadableStream = typeof globalThis.ReadableStream === 'function';\n\n\tif (supportsReadableStream) {\n\t\thasContentType = new globalThis.Request('https://a.com', {\n\t\t\tbody: new globalThis.ReadableStream(),\n\t\t\tmethod: 'POST',\n\t\t\t// @ts-expect-error - Types are outdated.\n\t\t\tget duplex() {\n\t\t\t\tduplexAccessed = true;\n\t\t\t\treturn 'half';\n\t\t\t},\n\t\t}).headers.has('Content-Type');\n\t}\n\n\treturn duplexAccessed && !hasContentType;\n})();\n\nexport const supportsAbortController = typeof globalThis.AbortController === 'function';\nexport const supportsResponseStreams = typeof globalThis.ReadableStream === 'function';\nexport const supportsFormData = typeof globalThis.FormData === 'function';\n\nexport const requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'] as const;\n\nconst validate = <T extends Array<true>>() => undefined as unknown as T;\nvalidate<[\n\tExpect<Equal<typeof requestMethods[number], HttpMethod>>,\n]>();\n\nexport const responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*',\n} as const;\n\n// The maximum value of a 32bit int (see issue #117)\nexport const maxSafeTimeout = 2_147_483_647;\n\nexport const stop = Symbol('stop');\n","import {requestMethods} from '../core/constants.js';\nimport type {HttpMethod} from '../types/options.js';\nimport type {RetryOptions} from '../types/retry.js';\n\nexport const normalizeRequestMethod = (input: string): string =>\n\trequestMethods.includes(input as HttpMethod) ? input.toUpperCase() : input;\n\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\n\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\n\nconst retryAfterStatusCodes = [413, 429, 503];\n\nconst defaultRetryOptions: Required<RetryOptions> = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes,\n\tmaxRetryAfter: Number.POSITIVE_INFINITY,\n\tbackoffLimit: Number.POSITIVE_INFINITY,\n};\n\nexport const normalizeRetryOptions = (retry: number | RetryOptions = {}): Required<RetryOptions> => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry,\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes,\n\t};\n};\n","import {TimeoutError} from '../errors/TimeoutError.js';\n\nexport type TimeoutOptions = {\n\ttimeout: number;\n\tfetch: typeof fetch;\n};\n\n// `Promise.race()` workaround (#91)\nexport default async function timeout(\n\trequest: Request,\n\tabortController: AbortController | undefined,\n\toptions: TimeoutOptions,\n): Promise<Response> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst timeoutId = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError(request));\n\t\t}, options.timeout);\n\n\t\tvoid options\n\t\t\t.fetch(request)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t});\n\t});\n}\n","// DOMException is supported on most modern browsers and Node.js 18+.\n// @see https://developer.mozilla.org/en-US/docs/Web/API/DOMException#browser_compatibility\nconst isDomExceptionSupported = Boolean(globalThis.DOMException);\n\n// TODO: When targeting Node.js 18, use `signal.throwIfAborted()` (https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted)\nexport function composeAbortError(signal?: AbortSignal) {\n\t/*\n\tNOTE: Use DomException with AbortError name as specified in MDN docs (https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort)\n\t> When abort() is called, the fetch() promise rejects with an Error of type DOMException, with name AbortError.\n\t*/\n\tif (isDomExceptionSupported) {\n\t\treturn new DOMException(signal?.reason ?? 'The operation was aborted.', 'AbortError');\n\t}\n\n\t// DOMException not supported. Fall back to use of error and override name.\n\tconst error = new Error(signal?.reason ?? 'The operation was aborted.');\n\terror.name = 'AbortError';\n\n\treturn error;\n}\n","// https://github.com/sindresorhus/delay/tree/ab98ae8dfcb38e1593286c94d934e70d14a4e111\n\nimport {composeAbortError} from '../errors/DOMException.js';\nimport {InternalOptions} from '../types/options.js';\n\nexport interface DelayOptions {\n\tsignal?: InternalOptions['signal'];\n}\n\nexport default async function delay(\n\tms: number,\n\t{signal}: DelayOptions,\n): Promise<void> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (signal) {\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(composeAbortError(signal));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', handleAbort, {once: true});\n\t\t}\n\n\t\tfunction handleAbort() {\n\t\t\treject(composeAbortError(signal!));\n\t\t\tclearTimeout(timeoutId);\n\t\t}\n\n\t\tconst timeoutId = setTimeout(() => {\n\t\t\tsignal?.removeEventListener('abort', handleAbort);\n\t\t\tresolve();\n\t\t}, ms);\n\t});\n}\n","import {HTTPError} from '../errors/HTTPError.js';\nimport {TimeoutError} from '../errors/TimeoutError.js';\nimport type {Hooks} from '../types/hooks.js';\nimport type {Input, InternalOptions, NormalizedOptions, Options, SearchParamsInit} from '../types/options.js';\nimport {ResponsePromise} from '../types/ResponsePromise.js';\nimport {deepMerge, mergeHeaders} from '../utils/merge.js';\nimport {normalizeRequestMethod, normalizeRetryOptions} from '../utils/normalize.js';\nimport timeout, {TimeoutOptions} from '../utils/timeout.js';\nimport delay from '../utils/delay.js';\nimport {ObjectEntries} from '../utils/types.js';\nimport {\n\tmaxSafeTimeout,\n\tresponseTypes,\n\tstop,\n\tsupportsAbortController,\n\tsupportsFormData,\n\tsupportsResponseStreams,\n\tsupportsRequestStreams,\n} from './constants.js';\n\nexport class Ky {\n\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\tstatic create(input: Input, options: Options): ResponsePromise {\n\t\tconst ky = new Ky(input, options);\n\n\t\tconst fn = async (): Promise<Response> => {\n\t\t\tif (ky._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\t// Delay the fetch so that body method shortcuts can set the Accept header\n\t\t\tawait Promise.resolve();\n\t\t\tlet response = await ky._fetch();\n\n\t\t\tfor (const hook of ky._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tky.request,\n\t\t\t\t\tky._options as NormalizedOptions,\n\t\t\t\t\tky._decorateResponse(response.clone()),\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globalThis.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tky._decorateResponse(response);\n\n\t\t\tif (!response.ok && ky._options.throwHttpErrors) {\n\t\t\t\tlet error = new HTTPError(response, ky.request, (ky._options as unknown) as NormalizedOptions);\n\n\t\t\t\tfor (const hook of ky._options.hooks.beforeError) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\terror = await hook(error);\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (ky._options.onDownloadProgress) {\n\t\t\t\tif (typeof ky._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsResponseStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn ky._stream(response.clone(), ky._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\t\tconst result = (isRetriableMethod ? ky._retry(fn) : fn()) as ResponsePromise;\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes) as ObjectEntries<typeof responseTypes>) {\n\t\t\tresult[type] = async () => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\t\tky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst awaitedResult = await result;\n\t\t\t\tconst response = awaitedResult.clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst arrayBuffer = await response.clone().arrayBuffer();\n\t\t\t\t\tconst responseSize = arrayBuffer.byteLength;\n\t\t\t\t\tif (responseSize === 0) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic request: Request;\n\tprotected abortController?: AbortController;\n\tprotected _retryCount = 0;\n\tprotected _input: Input;\n\tprotected _options: InternalOptions;\n\n\t// eslint-disable-next-line complexity\n\tconstructor(input: Input, options: Options = {}) {\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: (this._input as Request).credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders((this._input as Request).headers, options.headers),\n\t\t\thooks: deepMerge<Required<Hooks>>(\n\t\t\t\t{\n\t\t\t\t\tbeforeRequest: [],\n\t\t\t\t\tbeforeRetry: [],\n\t\t\t\t\tbeforeError: [],\n\t\t\t\t\tafterResponse: [],\n\t\t\t\t},\n\t\t\t\toptions.hooks,\n\t\t\t),\n\t\t\tmethod: normalizeRequestMethod(options.method ?? (this._input as Request).method),\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10_000 : options.timeout,\n\t\t\tfetch: options.fetch ?? globalThis.fetch.bind(globalThis),\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globalThis.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tconst originalSignal = this._options.signal;\n\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController!.abort(originalSignal.reason);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tif (supportsRequestStreams) {\n\t\t\t// @ts-expect-error - Types are outdated.\n\t\t\tthis._options.duplex = 'half';\n\t\t}\n\n\t\tthis.request = new globalThis.Request(this._input as RequestInfo, this._options as RequestInit);\n\n\t\tif (this._options.searchParams) {\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst textSearchParams = typeof this._options.searchParams === 'string'\n\t\t\t\t? this._options.searchParams.replace(/^\\?/, '')\n\t\t\t\t: new URLSearchParams(this._options.searchParams as unknown as SearchParamsInit).toString();\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst searchParams = '?' + textSearchParams;\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (\n\t\t\t\t((supportsFormData && this._options.body instanceof globalThis.FormData)\n\t\t\t\t\t|| this._options.body instanceof URLSearchParams) && !(this._options.headers && (this._options.headers as Record<string, string>)['content-type'])\n\t\t\t) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\t// The spread of `this.request` is required as otherwise it misses the `duplex` option for some reason and throws.\n\t\t\tthis.request = new globalThis.Request(new globalThis.Request(url, {...this.request}), this._options as RequestInit);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', this._options.headers.get('content-type') ?? 'application/json');\n\t\t\tthis.request = new globalThis.Request(this.request, {body: this._options.body});\n\t\t}\n\t}\n\n\tprotected _calculateRetryDelay(error: unknown) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn Math.min(this._options.retry.backoffLimit, BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprotected _decorateResponse(response: Response): Response {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => this._options.parseJson!(await response.text());\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tprotected async _retry<T extends (...args: any) => Promise<any>>(fn: T): Promise<ReturnType<T> | void> {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms, {signal: this._options.signal});\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: (this._options as unknown) as NormalizedOptions,\n\t\t\t\t\t\terror: error as Error,\n\t\t\t\t\t\tretryCount: this._retryCount,\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async _fetch(): Promise<Response> {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, (this._options as unknown) as NormalizedOptions);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options as TimeoutOptions);\n\t}\n\n\t/* istanbul ignore next */\n\tprotected _stream(response: Response, onDownloadProgress: Options['onDownloadProgress']) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\tif (response.status === 204) {\n\t\t\tif (onDownloadProgress) {\n\t\t\t\tonDownloadProgress({percent: 1, totalBytes, transferredBytes}, new Uint8Array());\n\t\t\t}\n\n\t\t\treturn new globalThis.Response(\n\t\t\t\tnull,\n\t\t\t\t{\n\t\t\t\t\tstatus: response.status,\n\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\theaders: response.headers,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn new globalThis.Response(\n\t\t\tnew globalThis.ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst reader = response.body!.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tawait read();\n\t\t\t\t\t}\n\n\t\t\t\t\tawait read();\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{\n\t\t\t\tstatus: response.status,\n\t\t\t\tstatusText: response.statusText,\n\t\t\t\theaders: response.headers,\n\t\t\t},\n\t\t);\n\t}\n}\n","/*! MIT License © Sindre Sorhus */\n\nimport {Ky} from './core/Ky.js';\nimport {requestMethods, stop} from './core/constants.js';\nimport type {KyInstance} from './types/ky.js';\nimport type {Input, Options} from './types/options.js';\nimport {validateAndMerge} from './utils/merge.js';\nimport {Mutable} from './utils/types.js';\n\nconst createInstance = (defaults?: Partial<Options>): KyInstance => {\n\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\tconst ky: Partial<Mutable<KyInstance>> = (input: Input, options?: Options) => Ky.create(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\t\tky[method] = (input: Input, options?: Options) => Ky.create(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.create = (newDefaults?: Partial<Options>) => createInstance(validateAndMerge(newDefaults));\n\tky.extend = (newDefaults?: Partial<Options>) => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky as KyInstance;\n};\n\nconst ky = createInstance();\n\nexport default ky;\n\nexport type {\n\tOptions,\n\tNormalizedOptions,\n\tRetryOptions,\n\tSearchParamsOption,\n\tDownloadProgress,\n} from './types/options.js';\n\nexport type {\n\tHooks,\n\tBeforeRequestHook,\n\tBeforeRetryHook,\n\tBeforeRetryState,\n\tBeforeErrorHook,\n\tAfterResponseHook,\n} from './types/hooks.js';\n\nexport type {ResponsePromise} from './types/ResponsePromise.js';\nexport type {KyResponse} from './types/response.js';\nexport {HTTPError} from './errors/HTTPError.js';\nexport {TimeoutError} from './errors/TimeoutError.js';\n"],"names":["HTTPError","response","request","options","code","status","title","statusText","trim","reason","name","Error","TimeoutError","isObject","value","validateAndMerge","sources","source","Array","isArray","TypeError","deepMerge","mergeHeaders","source1","source2","result","globalThis","Headers","isHeadersInstance","entries","key","undefined","delete","set","returnValue","headers","Object","supportsRequestStreams","duplexAccessed","hasContentType","ReadableStream","Request","body","method","duplex","has","supportsAbortController","AbortController","supportsResponseStreams","supportsFormData","FormData","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","maxSafeTimeout","stop","Symbol","normalizeRequestMethod","input","includes","toUpperCase","retryAfterStatusCodes","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","maxRetryAfter","Number","POSITIVE_INFINITY","backoffLimit","normalizeRetryOptions","retry","timeout","abortController","Promise","resolve","reject","timeoutId","setTimeout","abort","fetch","then","catch","clearTimeout","isDomExceptionSupported","Boolean","DOMException","composeAbortError","signal","error","delay","ms","aborted","addEventListener","handleAbort","once","removeEventListener","Ky","this","_input","_options","credentials","hooks","beforeRequest","beforeRetry","beforeError","afterResponse","prefixUrl","String","throwHttpErrors","bind","URL","startsWith","endsWith","originalSignal","searchParams","textSearchParams","replace","URLSearchParams","toString","url","JSON","stringify","get","_retryCount","retryAfter","after","isNaN","Date","parse","now","Math","min","parseJson","fn","_calculateRetryDelay","hook","retryCount","_retry","Response","clone","onDownloadProgress","totalBytes","transferredBytes","percent","Uint8Array","start","controller","read","reader","done","close","byteLength","enqueue","getReader","ky","RangeError","_fetch","_decorateResponse","modifiedResponse","ok","_stream","toLowerCase","type","mimeType","awaitedResult","createInstance","defaults","create","newDefaults","extend"],"sourceRoot":""}